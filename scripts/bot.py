import os
import common
base_path = os.path.dirname(__file__)
SCENES = common.load_scenes()
start_scene = 'nachalo'
TOKEN = '7875367168:AAHQzuShopUDhEJu4mruq7CweE9KSNfdFsk'
# image_path = Path(os.path.join(base_path, '..', 'images', scene["image"]))

#!/usr/bin/env python3.10
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from typing import Any, Optional, Dict, List
import os
import logging
from pathlib import Path
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class GameEngine:
    def __init__(self):
        self.player_state: Dict[str, Any] = {
            "health": 100,
            "hunger": 0,
            "thirst": 0,
            "inventory": [],
        }
        self.current_scene = start_scene
        self.last_message_id = None  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    def get_scene(self, scene_id: str) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã –ø–æ ID"""
        return SCENES.get(scene_id, {})

    def update_state(self, changes: Optional[Dict[str, int]] = None) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞"""
        if changes:
            for key, value in changes.items():
                if key in self.player_state:
                    self.player_state[key] += value

    def get_status_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä–æ–∫–∞"""
        inventory = ", ".join(self.player_state["inventory"]) or "–ø—É—Å—Ç–æ"
        return (
            f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {self.player_state['health']}% | "
            f"üçó –ì–æ–ª–æ–¥: {self.player_state['hunger']} | "
            f"üíß –ñ–∞–∂–¥–∞: {self.player_state['thirst']}\n"
            f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {inventory}"
        )

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω (–∑–∞–º–µ–Ω–∏—Ç–µ —Å–≤–æ–∏–º–∏)
# SCENES = {
#     "start": {
#         "text": "–í—ã –æ—á–Ω—É–ª–∏—Å—å –Ω–∞ –±–µ—Ä–µ–≥—É –Ω–µ–æ–±–∏—Ç–∞–µ–º–æ–≥–æ –æ—Å—Ç—Ä–æ–≤–∞...",
#         "image": "assets/start.jpg",
#         "actions": [
#             {"text": "üîç –û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è", "next": "look_around"},
#             {"text": "üå¥ –ò–¥—Ç–∏ –∫ –ø–∞–ª—å–º–∞–º", "next": "palm_trees"}
#         ],
#         "state_change": {"thirst": 5}
#     },
#     "look_around": {
#         "text": "–í—ã –≤–∏–¥–∏—Ç–µ –æ–±–ª–æ–º–∫–∏ –∫–æ—Ä–∞–±–ª—è –∏ –ø–µ—â–µ—Ä—É...",
#         "actions": [
#             {"text": "üö¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –æ–±–ª–æ–º–∫–∏", "next": "shipwreck"},
#             {"text": "üï≥Ô∏è –ó–∞–π—Ç–∏ –≤ –ø–µ—â–µ—Ä—É", "next": "cave_entrance"}
#         ]
#     }
# }

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    context.user_data["game"] = GameEngine()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    game = context.user_data["game"]
    if game.last_message_id:
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=game.last_message_id
            )
        except Exception as e:
            logger.warning(f"Could not delete message: {e}")
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –¢—ã –ø–æ–ø–∞–ª –Ω–∞ –Ω–µ–æ–±–∏—Ç–∞–µ–º—ã–π –æ—Å—Ç—Ä–æ–≤. "
        "–¢–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–∂–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –¥–æ–ª—å—à–µ."
    )
    
    await show_scene(update, context)

async def show_scene(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É (–≤—Å–µ–≥–¥–∞ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)"""
    try:
        game = context.user_data["game"]
        scene = game.get_scene(game.current_scene)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        full_text = f"{scene['text']}\n\n{game.get_status_text()}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        for action in scene.get("actions", []):
            if not isinstance(action.get("next"), str):
                logger.error(f"Invalid action: {action}")
                continue
            
            keyboard.append([
                InlineKeyboardButton(
                    text=action["text"],
                    callback_data=action["next"]
                )
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if game.last_message_id:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=game.last_message_id
                )
            except Exception as e:
                logger.warning(f"Could not delete message: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if "image" in scene:
            image_path = Path(os.path.join(base_path, '..', 'images', scene["image"]))
            if image_path.exists():
                with open(image_path, "rb") as photo_file:
                    sent_message = await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=photo_file,
                        caption=full_text,
                        reply_markup=reply_markup
                    )
                    game.last_message_id = sent_message.message_id
            else:
                logger.error(f"Image not found: {image_path}")
                sent_message = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=full_text,
                    reply_markup=reply_markup
                )
                game.last_message_id = sent_message.message_id
        else:
            sent_message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=full_text,
                reply_markup=reply_markup
            )
            game.last_message_id = sent_message.message_id
            
    except Exception as e:
        logger.error(f"Error in show_scene: {e}", exc_info=True)
        await send_fallback_message(update, context)

async def handle_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        game = context.user_data["game"]
        game.current_scene = query.data
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        scene = game.get_scene(game.current_scene)
        if "state_change" in scene:
            game.update_state(scene["state_change"])
        
        await show_scene(update, context)
    except Exception as e:
        logger.error(f"Error in handle_action: {e}", exc_info=True)
        await send_fallback_message(update, context)

async def send_fallback_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    try:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.critical(f"Critical failure: {e}")

def validate_scenes() -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ü–µ–Ω—ã –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å"""
    for scene_id, scene in SCENES.items():
        if "actions" in scene:
            for i, action in enumerate(scene["actions"]):
                if not isinstance(action.get("next"), str):
                    raise ValueError(f"Invalid 'next' in {scene_id} action {i}")
                if len(action["next"]) > 64:
                    raise ValueError(f"Callback too long in {scene_id} action {i}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        validate_scenes()
        
        application = Application.builder().token(TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(handle_action))
        application.add_error_handler(error_handler)
        
        logger.info("Bot starting...")
        application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.critical(f"Failed to start bot: {e}", exc_info=True)
        raise

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error("Exception while handling update:", exc_info=context.error)
    
    if isinstance(update, Update):
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
        except Exception as e:
            logger.error(f"Could not send error message: {e}")

if __name__ == "__main__":
    main()