#!/usr/bin/env python3.10
import logging
from collections.abc import Mapping
from typing import Any, Optional
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

import common
SCENES = common.load_situations()
start_scene = '–ù–∞—á–∞–ª–æ'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)



# ========== –ò–ì–†–û–í–û–ô –î–í–ò–ñ–û–ö ==========
class GameEngine:
    def __init__(self):
        self.player_state = {
            'health': 100,
            'hunger': 0,
            'thirst': 0,
            'inventory': [],
        }
        self.current_scene = start_scene

    def get_scene(self, scene_id: str) -> dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã –ø–æ ID"""
        return SCENES.get(scene_id, {})

    def update_state(self, changes: Optional[dict] = None) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞"""
        if changes:
            for key, value in changes.items():
                if key in self.player_state:
                    self.player_state[key] += value

    def get_status_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä–æ–∫–∞"""
        return (
            f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {self.player_state['health']}% | "
            f"üçó –ì–æ–ª–æ–¥: {self.player_state['hunger']} | "
            f"üíß –ñ–∞–∂–¥–∞: {self.player_state['thirst']}\n"
            f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {', '.join(self.player_state['inventory']) or '–ø—É—Å—Ç–æ'}"
        )

# ========== –°–¶–ï–ù–´ –ò–ì–†–´ ==========
# SCENES = {
#     "start": {
#         "text": (
#             "–í—ã –æ—á–Ω—É–ª–∏—Å—å –Ω–∞ –±–µ—Ä–µ–≥—É –Ω–µ–æ–±–∏—Ç–∞–µ–º–æ–≥–æ –æ—Å—Ç—Ä–æ–≤–∞. –ü–µ—Å–æ–∫, –ø–∞–ª—å–º—ã –∏ –±–µ—Å–∫—Ä–∞–π–Ω–∏–π –æ–∫–µ–∞–Ω. "
#             "–ì–æ–ª–æ–≤–∞ —Ä–∞—Å–∫–∞–ª—ã–≤–∞–µ—Ç—Å—è, –≤–æ —Ä—Ç—É –ø–µ—Ä–µ—Å–æ—Ö–ª–æ. –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?"
#         ),
#         "image": "assets/start.jpg",
#         "actions": [
#             {"text": "üîç –û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è –≤–æ–∫—Ä—É–≥", "next": "look_around"},
#             {"text": "üå¥ –ò–¥—Ç–∏ –∫ –ø–∞–ª—å–º–∞–º", "next": "palm_trees"},
#             {"text": "üíß –ò—Å–∫–∞—Ç—å –≤–æ–¥—É", "next": "find_water"},
#         ],
#     },
#     "look_around": {
#         "text": (
#             "–û—Å–º–æ—Ç—Ä–µ–≤—à–∏—Å—å, –≤—ã –≤–∏–¥–∏—Ç–µ:\n"
#             "- –û–±–ª–æ–º–∫–∏ –∫–æ—Ä–∞–±–ª—è –Ω–∞ –±–µ—Ä–µ–≥—É\n"
#             "- –ì—Ä—É–ø–ø—É –∫–æ–∫–æ—Å–æ–≤—ã—Ö –ø–∞–ª—å–º\n"
#             "- –ü–µ—â–µ—Ä—É –≤ —Å–∫–∞–ª–µ –Ω–µ–ø–æ–¥–∞–ª–µ–∫—É\n"
#             "- –°–ª–µ–¥—ã, –≤–µ–¥—É—â–∏–µ –≤ –¥–∂—É–Ω–≥–ª–∏"
#         ),
#         "image": "assets/look_around.jpg",
#         "actions": [
#             {"text": "üö¢ –ü–æ–¥–æ–π—Ç–∏ –∫ –æ–±–ª–æ–º–∫–∞–º", "next": "shipwreck"},
#             {"text": "ü•• –°–æ–±–∏—Ä–∞—Ç—å –∫–æ–∫–æ—Å—ã", "next": "get_coconuts"},
#             {"text": "üï≥Ô∏è –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–µ—â–µ—Ä—É", "next": "explore_cave"},
#         ],
#         "state_change": {"thirst": 5, "hunger": 5},
#     },
#     "get_coconuts": {
#         "text": (
#             "–í—ã —Å–±–∏–≤–∞–µ—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–∫–æ—Å–æ–≤. –û–¥–∏–Ω —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è, –Ω–æ –¥—Ä—É–≥–æ–π —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–∫–æ–ª–æ—Ç—å.\n"
#             "–°–æ–∫ —É—Ç–æ–ª—è–µ—Ç –∂–∞–∂–¥—É, –º—è–∫–æ—Ç—å –Ω–µ–º–Ω–æ–≥–æ —É–Ω–∏–º–∞–µ—Ç –≥–æ–ª–æ–¥."
#         ),
#         "image": "assets/coconuts.jpg",
#         "actions": [
#             {"text": "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –±–µ—Ä–µ–≥", "next": "start"},
#             {"text": "üõ†Ô∏è –°–¥–µ–ª–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "next": "make_tool"},
#         ],
#         "state_change": {"thirst": -20, "hunger": -15, "inventory": ["–∫–æ–∫–æ—Å"]},
#     },
#     # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å—Ü–µ–Ω—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
# }

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    context.user_data["game"] = GameEngine()
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –¢—ã –ø–æ–ø–∞–ª –Ω–∞ –Ω–µ–æ–±–∏—Ç–∞–µ–º—ã–π –æ—Å—Ç—Ä–æ–≤. "
        "–¢–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–∂–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –¥–æ–ª—å—à–µ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π."
    )
    
    await show_scene(update, context)


async def show_scene(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        game = context.user_data["game"]
        scene = game.get_scene(game.current_scene)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π —Å—Ü–µ–Ω—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        from pprint import pformat
        logger.debug(f"Preparing scene:\n{pformat(scene)}")
        
        # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
        scene_text = scene.get("text", "NO TEXT PROVIDED")
        status_text = game.get_status_text()
        
        try:
            full_text = f"{scene_text}\n\n{status_text}"
            if len(full_text) > 4096:  # –õ–∏–º–∏—Ç Telegram
                full_text = f"{scene_text[:3000]}...\n\n{status_text}"
        except Exception as e:
            logger.error(f"Text formatting error: {e}")
            full_text = "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"

        # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = []
        for action in scene.get("actions", []):
            try:
                if not isinstance(action.get("next"), str):
                    raise ValueError(f"Invalid 'next': {action.get('next')}")
                
                btn_text = action.get("text", "NO TEXT")
                if len(btn_text) > 64:  # –õ–∏–º–∏—Ç Telegram –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
                    btn_text = btn_text[:61] + "..."
                
                keyboard.append([InlineKeyboardButton(btn_text, callback_data=action["next"])])
            except Exception as e:
                logger.error(f"Invalid button: {action} - {e}")

        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

        # 3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        message = update.callback_query.message if update.callback_query else update.message
        
        # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if update.callback_query:
            try:
                await message.edit_text(full_text, reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"Can't edit message: {e}")
                await message.reply_text(full_text, reply_markup=reply_markup)
        else:
            await message.reply_text(full_text, reply_markup=reply_markup)

    except Exception as e:
        logger.critical(f"Fatal scene error: {e}", exc_info=True)
        if 'message' in locals():
            await message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
        raise


async def handle_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    game = context.user_data["game"]
    game.current_scene = query.data
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    scene = game.get_scene(game.current_scene)
    game.update_state(scene.get("state_change"))
    
    await show_scene(update, context)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error("Exception while handling an update:", exc_info=context.error)
    
    if update and hasattr(update, "effective_message"):
        await update.effective_message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
def main() -> None:
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    application = Application.builder().token("7875367168:AAHQzuShopUDhEJu4mruq7CweE9KSNfdFsk").build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_action))
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()